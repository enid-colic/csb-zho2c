{"version":3,"sources":["index.js"],"names":["linesA","linesB","i","gridWidth","push","strokeWidth","stroke","opacity","points","Math","round","GetImagePattern","imagePath","useImage","GroundRectangle","shapeProps","imageBg","isSelected","onSelect","onChange","shapeRef","React","useRef","trRef","useEffect","current","nodes","getLayer","batchDraw","Fragment","onClick","onTap","ref","draggable","fillPatternImage","onDragEnd","e","x","target","y","onDragMove","setPosition","onTransformEnd","node","scaleX","scaleY","width","max","height","boundBoxFunc","oldBox","newBox","Vegetables","console","log","initialRectangles","id","vegetablesRectangles","App","useState","rectangles","setRectangles","selectedId","selectShape","checkDeselect","getStage","items","j","key","window","innerWidth","innerHeight","onMouseDown","onTouchStart","map","rect","newAttrs","rects","slice","elem","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d7b6d22.chunk.js","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Stage, Layer, Rect, Line, Image, Transformer } from \"react-konva\";\nimport useImage from \"use-image\";\n\nconst grid = 30;\nconst gridWidth = 1191;\nconst linesA = [];\nconst linesB = [];\n\nfor (let i = 0; i < gridWidth / grid; i++) {\n  linesA.push(\n    <Line\n      strokeWidth={1}\n      stroke={\"black\"}\n      opacity=\"0.2\"\n      points={[\n        Math.round(i * grid) + 0.5,\n        0,\n        Math.round(i * grid) + 0.5,\n        gridWidth\n      ]}\n    />\n  );\n\n  linesB.push(\n    <Line\n      strokeWidth={0.5}\n      stroke={\"black\"}\n      opacity=\"0.2\"\n      points={[0, Math.round(i * grid), gridWidth, Math.round(i * grid)]}\n    />\n  );\n}\n\nconst GetImagePattern = (imagePath) => {\n  const [image] = useImage(imagePath);\n  return image;\n};\n\nconst GroundRectangle = ({\n  shapeProps,\n  imageBg,\n  isSelected,\n  onSelect,\n  onChange\n}) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n\n  return (\n    <React.Fragment>\n      <Rect\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        fillPatternImage={GetImagePattern(imageBg)}\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y()\n          });\n        }}\n        onDragMove={(e) => {\n          e.target.setPosition({\n            x: Math.round(e.target.x() / grid) * grid,\n            y: Math.round(e.target.y() / grid) * grid\n          });\n        }}\n        onTransformEnd={(e) => {\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            width: Math.max(5, node.width() * scaleX),\n            height: Math.max(node.height() * scaleY)\n          });\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nconst Vegetables = ({ shapeProps }) => {\n  const shapeRef = React.useRef();\n  console.log(shapeProps);\n  console.log(\"imageBg\");\n\n  return (\n    <React.Fragment>\n      <Rect\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        fillPatternImage={GetImagePattern(shapeProps.imageBg)}\n        onDragMove={(e) => {\n          e.target.setPosition({\n            x: Math.round(e.target.x() / grid) * grid,\n            y: Math.round(e.target.y() / grid) * grid\n          });\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nconst initialRectangles = [\n  {\n    x: 60,\n    y: 60,\n    width: 240,\n    height: 180,\n    id: \"rect1\",\n    imageBg: \"groundbg.png\"\n  },\n  {\n    x: 420,\n    y: 60,\n    width: 180,\n    height: 180,\n    id: \"rect2\",\n    imageBg: \"groundbg.png\"\n  }\n];\n\nconst vegetablesRectangles = [\n  {\n    x: 60,\n    y: 260,\n    width: 60,\n    height: 60,\n    id: \"rectarxt1\",\n    imageBg: \"artichoke.png\"\n  },\n  {\n    x: 120,\n    y: 260,\n    width: 30,\n    height: 60,\n    id: \"rectarxt1\",\n    imageBg: \"beet.png\"\n  }\n];\n\nconst App = () => {\n  const [rectangles, setRectangles] = React.useState(initialRectangles);\n  const [selectedId, selectShape] = React.useState(null);\n\n  const checkDeselect = (e) => {\n    const clickedOnEmpty = e.target === e.target.getStage();\n    if (clickedOnEmpty) {\n      selectShape(null);\n    }\n  };\n\n  const items = [];\n  let j = 0;\n  for (j = 0; j < 20; j++) {\n    items.push(<Vegetables key={j} shapeProps={vegetablesRectangles[0]} />);\n    items.push(<Vegetables key={j} shapeProps={vegetablesRectangles[1]} />);\n  }\n\n  return (\n    <Stage\n      width={window.innerWidth}\n      height={window.innerHeight}\n      onMouseDown={checkDeselect}\n      onTouchStart={checkDeselect}\n    >\n      <Layer>\n        {linesA}\n        {linesB}\n      </Layer>\n\n      <Layer>\n        {rectangles.map((rect, i) => {\n          return (\n            <GroundRectangle\n              key={i}\n              shapeProps={rect}\n              imageBg={rect.imageBg}\n              isSelected={rect.id === selectedId}\n              onSelect={() => {\n                selectShape(rect.id);\n              }}\n              onChange={(newAttrs) => {\n                const rects = rectangles.slice();\n                rects[i] = newAttrs;\n                setRectangles(rects);\n              }}\n            />\n          );\n        })}\n\n        {items.map((elem) => {\n          return elem;\n        })}\n      </Layer>\n    </Stage>\n  );\n};\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}